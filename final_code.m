clear;close;clc;
prompt = 'Enter image directory name: '
testfolder = input(prompt,'s');
a = dir(fullfile(testfolder, '*.png'));
N=size(a,1)
[x1, x2] = import_worm_data(N);
X = [x1';x2'];
% [coeff,score,latent] = pca(X);
[coeff, score, ~, ~, explained, ~] = pca(X,'Rows','all', 'Algorithm', 'eig');

A1 = score(:,1:200);
A1 = [A1 ones(size(A1,1),1)];
t = [ones(N,1); zeros(N,1)];

weight = [-28.0978403593158; -0.379937539668838; 4.34351132670907; -0.616312749847142; 1.80615199350104; 0.0143533052988942; -0.0954792198670141; -3.83602579766668; -5.17542366807974; 0.850105795569955; 0.164467470710595; -2.29749322501272; 0.738125236512530; 0.463556807197680; 0.552922158281177; 1.00066416896718; 0.821609758971273; 1.23262578520518; -0.669939259443079; 0.379055816393321; -0.822099973833562; -0.341980876618247; 0.437289350115634; 1.01711919983960; 0.810853074099492; -0.0142581949029366; -0.273838325500923; 0.475382937768135; -3.98086614041777; 1.40624516993163; 2.03173647334633; -1.30694692273520; -1.09112201446884; -0.0832331737590503; -0.484770071512514; -0.329149003430121; 1.65540267769735; 0.891686113957263; 1.25118571482168; -2.49764729230050; 0.262801416860769; 1.11342789298687; 0.455600755238495; 0.643503521171383; -1.65241009631140; -1.86673948707177; 1.90448330966435; -3.19162651797788; -0.239222835023921; 1.60084863152031; 3.72303092508506; -2.19595636967315; -0.159744226451528; -1.17276114795132; 1.66615741071109; -0.172803308910283; 1.06480662439812; -0.277935422983415; -0.966013094711895; 1.02681807686469; 2.52680263528258; -1.01397184481442; -3.67988381798744; 1.76166169898318; -1.83536380516003; 1.73976147135374; -1.66275752484326; 0.810057729664207; -0.0307818509812689; -0.298899002590866; 1.77270201300949; 3.15587558451986; -2.57633636523134; -0.860190836878937; -1.10840600828689; 0.589164616397131; -2.39289732083265; 2.61475614468772; 2.17749029235928; 1.65798684498374; 1.02178533484766; -1.38160598424948; -0.0972207830922206; -0.481336389038543; 0.207630725716004; 3.51290999828125; -0.952495584512327; -1.50550977135117; 1.36939948620237; -4.20666083416372; -5.41212028779960; 0.0457781737084267; -6.14868259223144; 2.49423840975549; 0.0380317886809477; 1.37093497819956; -0.389220143925990; -0.911997027194160; 0.923159805344278; -2.32213462282772; 0.228139665462915; 2.73443623629927; -1.48442625517486; 0.546632913634930; 0.619325379020149; -4.45987105570452; -4.00324339922480; -4.23205112273432; -3.03290232584242; -2.62472603756392; 1.77439028214578; -2.38660887118305; 0.765729637808440; 0.702334389568061; 2.77174419422979; -1.85464612609094; 0.857160459747083; 2.51810490740182; -0.854644283470587; 4.24312135556707; -0.556696558347588; 1.98854013803274; -0.191242625108481; -1.61964453688258; 3.63979705437246; 1.49223799184084; -2.32293154289247; -3.10378026854841; 2.52301040492104; 1.77955671245208; 1.61619965836488; -2.74407792832531; -1.38141679399693; 1.78762277385539; -0.816916055712336; 0.794248666829123; 0.797905653479666; -1.20530251767373; 0.486835418929715; -0.891287210541584; -2.70802030711770; -0.0547501334978177; -0.846387802375647; -7.70433651255137; 0.238519582524448; -1.03374588188691; 3.01327878887418; -3.52090060980870; -2.14798061227391; 3.06164842222456; 1.60176821999191; -0.964858060871738; 6.78214458339912; 2.21300801275899; -0.0657596555820396; 3.61132727271777; -1.22057927414060; 2.00652888330214; -1.16443041726343; 0.627790192988033; -4.97296648638462; 1.19027558673111; 2.79000602818724; 0.421251503269973; 1.05004845689864; 1.95814835531494; 3.97408028815236; -1.64642769866900; 0.824812276863318; 0.433660848747229; 2.24733630347194; -2.41062210784433; -1.04199921728141; -2.37012718456282; 4.08253545845414; -0.280075600535350; -2.31926148352032; 1.22364448093037; -0.896681113010803; -2.44558058292416; -1.60459657539134; 1.65849611875406; -4.78134850738311; 0.484507992844493; 1.58817118637159; 2.26775202402366; -0.643893879413562; 0.449410591324539; -1.42780534150004; -3.10160269594887; 2.42469093405905; 2.55026731881145; 3.11225509214462; -0.0977046082914320; -0.137412465491518; 2.51709337940793; -1.86465292405090; -0.434119672307871; -2.25481101843472; 1.69484369968879; -12.1036469968879];

y1 = A1*weight;
y2 = sigmoid_activate(y1');
y3 = classify(y2);
[TP,TN,FP,FN,a,p,r,f1,s] = confusion_matrix(t,y3)



function [worm_data, no_worm_data] = import_worm_data(num_of_pics)
    
    val = 0.36;
    sz = ceil(101*val);
    g = sz*sz;
    worm_data = zeros(g, num_of_pics);
    no_worm_data = zeros(g, num_of_pics);
    for i = 1:num_of_pics

        filename = sprintf('%s_%d.%s','C:\Users\Student\Desktop\Celegans_Train\1\image', i ,'png');
        [cval] = imread(filename);
        cval_t = imresize(cval,val);
        cval_t = imbinarize(cval_t);
        re_cval = cval_t(:)'; 

        worm_data(:, i) = re_cval;
    end

    for i = 1:num_of_pics

        filename = sprintf('%s_%d.%s','C:\Users\Student\Desktop\Celegans_Train\0\image', i ,'png');
        [cval] = imread(filename);
        cval_t = imresize(cval,val);
        cval_t = imbinarize(cval_t);
        re_cval = cval_t(:)'; 

        no_worm_data(:, i) = re_cval;
    end
end



function [y] = sigmoid_activate(x_entries)
y = zeros(1,size(x_entries, 2));
for i = 1:size(x_entries, 2)
    answ = 1/(1 + exp(-x_entries(1, i)));
    y(1, i) = answ;
end

end

function [y] = classify(y_hat)

y = zeros(1, size(y_hat, 2));

    for i = 1:size(y_hat, 2)
        if y_hat(1, i) >= 0.5
            y(1, i) = 1;
        end
        if y_hat(1, i) < 0.5
            y(1, i) = 0;
        end
    end
    
end

function [TP,TN,FP,FN, Accuracy,Precision,Recall,F1_Score,Specificity] = confusion_matrix(a,b)

    TP = 0;
    TN = 0;
    FP = 0;
    FN = 0;
    for i=1:length(a)
        
        if(a(i) == 1)
            if(b(i) == 1)
                TP = TP + 1;
            else
                FN = FN + 1;
            end
        else
            if(b(i) == 0)
                TN = TN + 1;
            else
                FP = FP + 1;
            end
        end
        
    end

    Accuracy = (TP + TN) / (TP + FP + TN + FN);
    Precision = TP / (TP + FP);
    Recall = TP / (TP + FN); % Sensitivity
    F1_Score =  2 * (Recall*Precision) / (Recall + Precision);
    Specificity = TN / (TN + FP);

end





